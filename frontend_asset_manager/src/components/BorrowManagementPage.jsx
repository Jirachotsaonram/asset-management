import React, { useState, useEffect } from 'react';
import { getBorrows, addBorrow, returnAsset, getAssets, getDepartments } from '../api/api';

const BorrowManagementPage = () => {
    const [borrows, setBorrows] = useState([]);
    const [assets, setAssets] = useState([]); // Master: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ
    const [departments, setDepartments] = useState([]); // Master: ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [showAddForm, setShowAddForm] = useState(false);
    const [borrowForm, setBorrowForm] = useState({ 
        asset_id: '', 
        borrower_name: '', 
        department_id: '', 
        borrow_date: new Date().toISOString().split('T')[0] 
    });

    useEffect(() => {
        fetchAllData();
    }, []);

    const fetchAllData = async () => {
        try {
            const [borrowData, assetData, deptData] = await Promise.all([
                getBorrows(), 
                getAssets(), 
                getDepartments()
            ]);
            
            setBorrows(borrowData);
            // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown
            setAssets(assetData.filter(a => a.status === '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' || a.status === '‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°'));
            setDepartments(deptData);
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Default ID
            if (assetData.length > 0) setBorrowForm(prev => ({...prev, asset_id: assetData[0].asset_id}));
            if (deptData.length > 0) setBorrowForm(prev => ({...prev, department_id: deptData[0].department_id}));

        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà
    const handleAddBorrow = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        try {
            await addBorrow(borrowForm);
            alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß');
            setShowAddForm(false);
            setBorrowForm(prev => ({ ...prev, asset_id: '', borrower_name: '', department_id: '' }));
            await fetchAllData(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    const handleReturn = async (borrowId) => {
        if (!window.confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢?')) return;
        
        setIsLoading(true);
        try {
            const returnData = {
                borrow_id: borrowId,
                return_date: new Date().toISOString().split('T')[0] // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            };
            await returnAsset(returnData);
            alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" ‡πÅ‡∏•‡πâ‡∏ß');
            await fetchAllData();
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    if (isLoading) return <div style={{ padding: '20px' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô...</div>;
    if (error) return <div style={{ padding: '20px', color: 'red' }}>Error: {error}</div>;

    return (
        <div style={{ padding: '20px' }}>
            <h2>üìö ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</h2>
            <button onClick={() => setShowAddForm(!showAddForm)} style={{ marginBottom: '15px', padding: '10px', backgroundColor: '#3f51b5', color: 'white', border: 'none' }}>
                {showAddForm ? '‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' : '+ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà'}
            </button> 
            
            {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° */}
            {showAddForm && (
                <BorrowForm 
                    borrowForm={borrowForm} 
                    setBorrowForm={setBorrowForm} 
                    handleAddBorrow={handleAddBorrow} 
                    assets={assets.filter(a => a.status === '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ')} // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°
                    departments={departments}
                    isLoading={isLoading} 
                    onCancel={() => setShowAddForm(false)}
                />
            )}

            {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° */}
            <h4 style={{ marginTop: '20px' }}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({borrows.length})</h4>
            <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '10px' }}>
                <thead>
                    <tr style={{ backgroundColor: '#f2f2f2' }}>
                        <th style={tableHeaderStyle}>‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏°</th>
                        <th style={tableHeaderStyle}>‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</th>
                        <th style={tableHeaderStyle}>‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏° / ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô</th>
                        <th style={tableHeaderStyle}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°</th>
                        <th style={tableHeaderStyle}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô (‡∏Å‡∏≥‡∏´‡∏ô‡∏î)</th>
                        <th style={tableHeaderStyle}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th style={tableHeaderStyle}>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                    </tr>
                </thead>
                <tbody>
                    {borrows.map((b) => (
                        <tr key={b.borrow_id}>
                            <td style={tableCellStyle}>{b.borrow_id}</td>
                            <td style={tableCellStyle}>{b.asset_name} (ID: {b.asset_id})</td>
                            <td style={tableCellStyle}>{b.borrower_name} / {b.department_name}</td>
                            <td style={tableCellStyle}>{b.borrow_date}</td>
                            <td style={tableCellStyle}>{b.return_date || '-'}</td>
                            <td style={{...tableCellStyle, color: b.status === '‡∏¢‡∏∑‡∏°' ? 'red' : 'green'}}>
                                <strong>{b.status}</strong>
                            </td>
                            <td style={tableCellStyle}>
                                {b.status === '‡∏¢‡∏∑‡∏°' && (
                                    <button onClick={() => handleReturn(b.borrow_id)} disabled={isLoading} style={{ backgroundColor: '#ff9800', color: 'white' }}>
                                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∑‡∏ô
                                    </button>
                                )}
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};


// Component ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
const BorrowForm = ({ borrowForm, setBorrowForm, handleAddBorrow, assets, departments, isLoading, onCancel }) => (
    <div style={{ border: '1px solid #ccc', padding: '15px', marginBottom: '20px', backgroundColor: '#e8eaf6' }}>
        <h4>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°</h4>
        <form onSubmit={handleAddBorrow} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '15px' }}>
            
            <Select label="‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°" name="asset_id" value={borrowForm.asset_id} onChange={(e) => setBorrowForm(prev => ({ ...prev, asset_id: e.target.value }))}>
                {assets.map(a => (
                    <option key={a.asset_id} value={a.asset_id}>
                        {a.asset_name} (ID: {a.asset_id})
                    </option>
                ))}
            </Select>
            <Input label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°" name="borrower_name" value={borrowForm.borrower_name} onChange={(e) => setBorrowForm(prev => ({ ...prev, borrower_name: e.target.value }))} required />
            <Input label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°" name="borrow_date" type="date" value={borrowForm.borrow_date} onChange={(e) => setBorrowForm(prev => ({ ...prev, borrow_date: e.target.value }))} required />

            <Select label="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°" name="department_id" value={borrowForm.department_id} onChange={(e) => setBorrowForm(prev => ({ ...prev, department_id: e.target.value }))}>
                {departments.map(d => (
                    <option key={d.department_id} value={d.department_id}>
                        {d.department_name}
                    </option>
                ))}
            </Select>
            
            {/* ‡∏õ‡∏∏‡πà‡∏° Submit ‡πÅ‡∏•‡∏∞ Cancel */}
            <div style={{ gridColumn: 'span 3', display: 'flex', gap: '10px' }}>
                <button type="submit" disabled={isLoading} style={{ padding: '10px', flex: 1, backgroundColor: '#3f51b5', color: 'white' }}>
                    {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°'}
                </button>
                <button type="button" onClick={onCancel} style={{ padding: '10px', flex: 1, backgroundColor: '#ccc' }}>
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
            </div>
        </form>
    </div>
);


const Input = ({ label, ...props }) => (
    <div>
        <label style={{ display: 'block', marginBottom: '5px' }}>{label}:</label>
        <input {...props} style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }} />
    </div>
);
const Select = ({ label, children, ...props }) => (
    <div>
        <label style={{ display: 'block', marginBottom: '5px' }}>{label}:</label>
        <select {...props} style={{ width: '100%', padding: '10px', boxSizing: 'border-box' }}>
            {children}
        </select>
    </div>
);
const tableHeaderStyle = { border: '1px solid #ddd', padding: '12px', textAlign: 'left' };
const tableCellStyle = { border: '1px solid #ddd', padding: '10px' };

export default BorrowManagementPage;