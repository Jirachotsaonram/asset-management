import React, { useState, useEffect } from 'react';
import { getUsers, updateUser, deleteUser, addUser } from '../api/api';

const UserManagementPage = () => {
    const [users, setUsers] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [editingId, setEditingId] = useState(null); // ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const [editForm, setEditForm] = useState({}); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const [showAddForm, setShowAddForm] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const [addForm, setAddForm] = useState({ username: '', password: '', fullname: '', role: 'Inspector', email: '', phone: '', status: 'Active' });

    useEffect(() => {
        fetchUsers();
    }, []);

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const fetchUsers = async () => {
        try {
            const data = await getUsers(); // ‡πÉ‡∏ä‡πâ getUsers ‡∏à‡∏≤‡∏Å api.js
            setUsers(data);
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (Add User)
    const handleAddSubmit = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ username ‡πÅ‡∏•‡∏∞ password
            if (!addForm.username || !addForm.password) {
                 throw new Error('Username ‡πÅ‡∏•‡∏∞ Password ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á');
            }
            await addUser(addForm);
            alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            setAddForm({ username: '', password: '', fullname: '', role: 'Inspector', email: '', phone: '', status: 'Active' });
            setShowAddForm(false);
            await fetchUsers();
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Update User)
    const handleSaveEdit = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);
        try {
            // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÅ‡∏•‡∏∞ user_id)
            const dataToSend = {
                user_id: editForm.user_id,
                fullname: editForm.fullname,
                role: editForm.role,
                status: editForm.status,
                email: editForm.email,
                phone: editForm.phone,
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                ...(editForm.password && { password: editForm.password }) 
            };
            
            await updateUser(dataToSend);
            alert(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID ${editingId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
            setEditingId(null);
            await fetchUsers(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // 4. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Delete User)
    const handleDelete = async (userId, fullname) => {
        if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${fullname} (ID: ${userId})?`)) {
            return;
        }
        setIsLoading(true);
        try {
            await deleteUser(userId);
            alert('‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            await fetchUsers();
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };
    
    // ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°
    const handleEditClick = (user) => {
        setEditingId(user.user_id);
        setEditForm({ 
            ...user,
            password: '' // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô input
        });
    };

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const handleChangeEdit = (e) => {
        const { name, value } = e.target;
        setEditForm(prev => ({ ...prev, [name]: value }));
    };
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
    const handleChangeAdd = (e) => {
        const { name, value } = e.target;
        setAddForm(prev => ({ ...prev, [name]: value }));
    };


    if (isLoading) return <div style={{ padding: '20px' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...</div>;
    if (error) return <div style={{ padding: '20px', color: 'red' }}>Error: {error}</div>;

    return (
        <div style={{ padding: '20px' }}>
            <h2>üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (Users Management)</h2>
            <button onClick={() => setShowAddForm(!showAddForm)} style={{ marginBottom: '15px', padding: '10px', backgroundColor: '#4CAF50', color: 'white', border: 'none' }}>
                {showAddForm ? '‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' : '+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'}
            </button> 
            
            {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
            {showAddForm && (
                <AddUserForm 
                    addForm={addForm} 
                    handleChangeAdd={handleChangeAdd} 
                    handleAddSubmit={handleAddSubmit} 
                    isLoading={isLoading} 
                    onCancel={() => setShowAddForm(false)}
                />
            )}

            <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
                <thead>
                    <tr style={{ backgroundColor: '#f2f2f2' }}>
                        <th style={tableHeaderStyle}>ID</th>
                        <th style={tableHeaderStyle}>Username</th>
                        <th style={tableHeaderStyle}>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                        <th style={tableHeaderStyle}>‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Role)</th>
                        <th style={tableHeaderStyle}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th style={tableHeaderStyle}>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                        <th style={tableHeaderStyle}>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                    </tr>
                </thead>
                <tbody>
                    {users.map((user) => (
                        <tr key={user.user_id}>
                            {editingId === user.user_id ? (
                                // ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° Input)
                                <tr style={{ backgroundColor: '#fffbe6' }}>
                                    <td style={tableCellStyle}>{user.user_id}</td>
                                    <td style={tableCellStyle}>{user.username}</td>
                                    <td style={tableCellStyle}>
                                        <input type="text" name="fullname" value={editForm.fullname} onChange={handleChangeEdit} style={{ width: '90%' }} />
                                    </td>
                                    <td style={tableCellStyle}>
                                        <select name="role" value={editForm.role} onChange={handleChangeEdit} style={{ width: '90%' }}>
                                            <option value="Admin">Admin</option>
                                            <option value="Inspector">Inspector</option>
                                        </select>
                                    </td>
                                    <td style={tableCellStyle}>
                                        <select name="status" value={editForm.status} onChange={handleChangeEdit} style={{ width: '90%' }}>
                                            <option value="Active">Active</option>
                                            <option value="Inactive">Inactive</option>
                                        </select>
                                    </td>
                                     <td style={tableCellStyle}>
                                        <input type="text" name="email" value={editForm.email} onChange={handleChangeEdit} placeholder="E-mail" style={{ width: '90%' }} />
                                    </td>
                                    <td style={tableCellStyle}>
                                        <button onClick={handleSaveEdit} disabled={isLoading} style={{ marginRight: '5px' }}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                                        <button onClick={() => setEditingId(null)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                                    </td>
                                </tr>
                            ) : (
                                // ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
                                <>
                                    <td style={tableCellStyle}>{user.user_id}</td>
                                    <td style={tableCellStyle}>{user.username}</td>
                                    <td style={tableCellStyle}>{user.fullname}</td>
                                    <td style={tableCellStyle}>{user.role}</td>
                                    <td style={tableCellStyle}>{user.status}</td>
                                    <td style={tableCellStyle}>{user.email}</td>
                                    <td style={tableCellStyle}>
                                        <button onClick={() => handleEditClick(user)} style={{ marginRight: '5px' }}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                                        <button onClick={() => handleDelete(user.user_id, user.fullname)} style={{ backgroundColor: '#f44336', color: 'white' }}>‡∏•‡∏ö</button>
                                    </td>
                                </>
                            )}
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

// Component ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const AddUserForm = ({ addForm, handleChangeAdd, handleAddSubmit, isLoading, onCancel }) => (
    <div style={{ border: '1px solid #ccc', padding: '15px', marginBottom: '20px', backgroundColor: '#f9f9f9' }}>
        <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</h4>
        <form onSubmit={handleAddSubmit} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '15px' }}>
            <Input label="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (Username)*" name="username" value={addForm.username} onChange={handleChangeAdd} required />
            <Input label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (Password)*" name="password" type="password" value={addForm.password} onChange={handleChangeAdd} required />
            <Input label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" name="fullname" value={addForm.fullname} onChange={handleChangeAdd} required />
            
            <Select label="‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Role)" name="role" value={addForm.role} onChange={handleChangeAdd}>
                <option value="Admin">Admin</option>
                <option value="Inspector">Inspector</option>
            </Select>
            <Input label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•" name="email" type="email" value={addForm.email} onChange={handleChangeAdd} />
            <Input label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" name="phone" type="text" value={addForm.phone} onChange={handleChangeAdd} />

            <div style={{ gridColumn: 'span 3', display: 'flex', gap: '10px' }}>
                <button type="submit" disabled={isLoading} style={{ padding: '10px', flex: 1, backgroundColor: '#4CAF50', color: 'white' }}>
                    {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}
                </button>
                <button type="button" onClick={onCancel} style={{ padding: '10px', flex: 1, backgroundColor: '#ccc' }}>
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
            </div>
        </form>
    </div>
);

// Component ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Input/Select
const Input = ({ label, ...props }) => (
    <div>
        <label style={{ display: 'block', marginBottom: '5px' }}>{label}:</label>
        <input {...props} style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }} />
    </div>
);
const Select = ({ label, children, ...props }) => (
    <div>
        <label style={{ display: 'block', marginBottom: '5px' }}>{label}:</label>
        <select {...props} style={{ width: '100%', padding: '10px', boxSizing: 'border-box' }}>
            {children}
        </select>
    </div>
);

const tableHeaderStyle = { border: '1px solid #ddd', padding: '12px', textAlign: 'left' };
const tableCellStyle = { border: '1px solid #ddd', padding: '10px' };


export default UserManagementPage;