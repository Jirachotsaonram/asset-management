import React, { useState, useEffect } from 'react';
import { getAssets, addAsset, updateAsset, deleteAsset, getLocations, getDepartments } from '../api/api';

const initialNewAssetForm = {
    asset_id: '',
    asset_name: '',
    serial_number: '',
    received_date: new Date().toISOString().split('T')[0], // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    location_id: '',
    department_id: '',
    status: '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
    price: 0
};

const AssetManagementPage = () => {
    const [assets, setAssets] = useState([]);
    const [locations, setLocations] = useState([]);
    const [departments, setDepartments] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà
    const [showAddForm, setShowAddForm] = useState(false);
    const [newAssetForm, setNewAssetForm] = useState(initialNewAssetForm);
    
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const [editingId, setEditingId] = useState(null); 
    const [editForm, setEditForm] = useState({});

    useEffect(() => {
        fetchAllMasterDataAndAssets();
    }, []);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏•‡∏∞ Master Data ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const fetchAllMasterDataAndAssets = async () => {
        try {
            const [assetData, locData, deptData] = await Promise.all([
                getAssets(),
                getLocations(), // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
                getDepartments() // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
            ]);
            
            setAssets(assetData);
            setLocations(locData);
            setDepartments(deptData);

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
            if (locData.length > 0) initialNewAssetForm.location_id = locData[0].location_id;
            if (deptData.length > 0) initialNewAssetForm.department_id = deptData[0].department_id;
            setNewAssetForm({...initialNewAssetForm});

        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà (Create)
    const handleAddAsset = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);
        try {
            if (!newAssetForm.asset_id || !newAssetForm.asset_name || !newAssetForm.location_id) {
                throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á');
            }
            await addAsset(newAssetForm); // ‡πÉ‡∏ä‡πâ addAsset ‡∏à‡∏≤‡∏Å api.js
            alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            setShowAddForm(false);
            setNewAssetForm(initialNewAssetForm); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
            await fetchAllMasterDataAndAssets();
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Update)
    const handleSaveEdit = async (e) => {
        e.preventDefault();
        setIsLoading(true);
        setError(null);
        try {
            await updateAsset(editForm); // ‡πÉ‡∏ä‡πâ updateAsset ‡∏à‡∏≤‡∏Å api.js
            alert(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå ID ${editingId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
            setEditingId(null);
            await fetchAllMasterDataAndAssets();
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    // 3. ‡∏•‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå (Delete)
    const handleDelete = async (assetId, assetName) => {
        if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå: ${assetName} (ID: ${assetId})?`)) {
            return;
        }
        setIsLoading(true);
        try {
            await deleteAsset(assetId); // ‡πÉ‡∏ä‡πâ deleteAsset ‡∏à‡∏≤‡∏Å api.js
            alert('‡∏•‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            await fetchAllMasterDataAndAssets();
        } catch (err) {
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };
    
    // ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°
    const handleEditClick = (asset) => {
        setEditingId(asset.asset_id);
        setEditForm({ 
            ...asset,
            // ‡πÅ‡∏õ‡∏•‡∏á ID ‡∏à‡∏≤‡∏Å String ‡πÄ‡∏õ‡πá‡∏ô Number ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
            location_id: parseInt(asset.location_id),
            department_id: parseInt(asset.department_id)
        });
    };

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const handleChangeEdit = (e) => {
        const { name, value, type } = e.target;
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        const val = (type === 'number' || name.includes('_id')) ? parseInt(value) : value;
        setEditForm(prev => ({ ...prev, [name]: val }));
    };

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
    const handleChangeAdd = (e) => {
        const { name, value, type } = e.target;
        const val = (type === 'number' || name.includes('_id')) ? (value === '' ? '' : parseInt(value)) : value;
        setNewAssetForm(prev => ({ ...prev, [name]: val }));
    };

    if (isLoading) return <div style={{ padding: '20px' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå...</div>;
    if (error) return <div style={{ padding: '20px', color: 'red' }}>Error: {error}</div>;

    return (
        <div style={{ padding: '20px' }}>
            <h2>üõí ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Asset Management)</h2>
            <button onClick={() => setShowAddForm(!showAddForm)} style={{ marginBottom: '15px', padding: '10px', backgroundColor: '#007bff', color: 'white', border: 'none' }}>
                {showAddForm ? '‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå' : '+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà'}
            </button> 
            
            {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå */}
            {showAddForm && (
                <AddAssetForm 
                    newAssetForm={newAssetForm} 
                    handleChangeAdd={handleChangeAdd} 
                    handleAddAsset={handleAddAsset} 
                    locations={locations}
                    departments={departments}
                />
            )}

            {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
            <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
                {/* ... (Header ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á) ... */}
                <thead>
                    <tr style={{ backgroundColor: '#f2f2f2' }}>
                        <th style={tableHeaderStyle}>ID</th>
                        <th style={tableHeaderStyle}>‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</th>
                        <th style={tableHeaderStyle}>S/N</th>
                        <th style={tableHeaderStyle}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á</th>
                        <th style={tableHeaderStyle}>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô</th>
                        <th style={tableHeaderStyle}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th style={tableHeaderStyle}>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                        <th style={tableHeaderStyle}>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
                    </tr>
                </thead>
                <tbody>
                    {assets.map((asset) => (
                        <tr key={asset.asset_id}>
                            {editingId === asset.asset_id ? (
                                // ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° Input)
                                <EditAssetRow 
                                    asset={asset} 
                                    editForm={editForm} 
                                    handleChangeEdit={handleChangeEdit} 
                                    handleSaveEdit={handleSaveEdit} 
                                    setEditingId={setEditingId}
                                    locations={locations}
                                    departments={departments}
                                />
                            ) : (
                                // ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
                                <>
                                    <td style={tableCellStyle}>{asset.asset_id}</td>
                                    <td style={tableCellStyle}>{asset.asset_name}</td>
                                    <td style={tableCellStyle}>{asset.serial_number}</td>
                                    <td style={tableCellStyle}>{locations.find(l => l.location_id == asset.location_id)?.room_number || 'N/A'}</td>
                                    <td style={tableCellStyle}>{departments.find(d => d.department_id == asset.department_id)?.department_name || 'N/A'}</td>
                                    <td style={{...tableCellStyle, color: asset.status === '‡∏ä‡∏≥‡∏£‡∏∏‡∏î' || asset.status === '‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°' ? 'red' : 'green'}}>{asset.status}</td>
                                    <td style={tableCellStyle}>{parseFloat(asset.price).toLocaleString()}</td>
                                    <td style={tableCellStyle}>
                                        <button onClick={() => handleEditClick(asset)} style={{ marginRight: '5px' }}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                                        <button onClick={() => handleDelete(asset.asset_id, asset.asset_name)} style={{ backgroundColor: '#f44336', color: 'white' }}>‡∏•‡∏ö</button>
                                    </td>
                                </>
                            )}
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};


// Component ‡∏¢‡πà‡∏≠‡∏¢: ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà
const AddAssetForm = ({ newAssetForm, handleChangeAdd, handleAddAsset, locations, departments }) => (
    <div style={{ border: '1px solid #ccc', padding: '15px', marginBottom: '20px', backgroundColor: '#e6f7ff' }}>
        <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà</h4>
        <form onSubmit={handleAddAsset} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '15px' }}>
            <Input label="‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå (Asset ID)*" name="asset_id" value={newAssetForm.asset_id} onChange={handleChangeAdd} required />
            <Input label="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå*" name="asset_name" value={newAssetForm.asset_name} onChange={handleChangeAdd} required />
            <Input label="‡πÄ‡∏•‡∏Ç‡∏ã‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏• (S/N)" name="serial_number" value={newAssetForm.serial_number} onChange={handleChangeAdd} />
            
            <Select label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á (Location)*" name="location_id" value={newAssetForm.location_id} onChange={handleChangeAdd}>
                {locations.map(l => (
                    <option key={l.location_id} value={l.location_id}>
                        {l.building_name} - {l.room_number}
                    </option>
                ))}
            </Select>
            <Select label="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô (Department)*" name="department_id" value={newAssetForm.department_id} onChange={handleChangeAdd}>
                 {departments.map(d => (
                    <option key={d.department_id} value={d.department_id}>
                        {d.department_name}
                    </option>
                ))}
            </Select>
            <Input label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤" name="received_date" type="date" value={newAssetForm.received_date} onChange={handleChangeAdd} />
            
            <Input label="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)" name="price" type="number" value={newAssetForm.price} onChange={handleChangeAdd} />
            <div style={{ gridColumn: 'span 3' }}>
                <button type="submit" style={{ padding: '10px', backgroundColor: '#007bff', color: 'white', border: 'none' }}>
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
                </button>
            </div>
        </form>
    </div>
);

// Component ‡∏¢‡πà‡∏≠‡∏¢: ‡πÅ‡∏ñ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Update)
const EditAssetRow = ({ asset, editForm, handleChangeEdit, handleSaveEdit, setEditingId, locations, departments }) => (
    <>
        <td style={tableCellStyle}>{asset.asset_id}</td>
        <td style={tableCellStyle}>
            <input type="text" name="asset_name" value={editForm.asset_name || ''} onChange={handleChangeEdit} style={{ width: '90%' }} />
        </td>
        <td style={tableCellStyle}>
            <input type="text" name="serial_number" value={editForm.serial_number || ''} onChange={handleChangeEdit} style={{ width: '90%' }} />
        </td>
        <td style={tableCellStyle}>
            <select name="location_id" value={editForm.location_id} onChange={handleChangeEdit} style={{ width: '90%' }}>
                {locations.map(l => (
                    <option key={l.location_id} value={l.location_id}>
                        {l.room_number}
                    </option>
                ))}
            </select>
        </td>
        <td style={tableCellStyle}>
            <select name="department_id" value={editForm.department_id} onChange={handleChangeEdit} style={{ width: '90%' }}>
                {departments.map(d => (
                    <option key={d.department_id} value={d.department_id}>
                        {d.department_name}
                    </option>
                ))}
            </select>
        </td>
        <td style={tableCellStyle}>
            <select name="status" value={editForm.status} onChange={handleChangeEdit} style={{ width: '90%' }}>
                {['‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ', '‡∏ä‡∏≥‡∏£‡∏∏‡∏î', '‡∏£‡∏≠‡∏ã‡πà‡∏≠‡∏°', '‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢', '‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°'].map(s => <option key={s} value={s}>{s}</option>)}
            </select>
        </td>
        <td style={tableCellStyle}>
             <input type="number" name="price" value={editForm.price || 0} onChange={handleChangeEdit} style={{ width: '90%' }} />
        </td>
        <td style={tableCellStyle}>
            <button onClick={handleSaveEdit} style={{ marginRight: '5px' }}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={() => setEditingId(null)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
        </td>
    </>
);


// Component ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Input/Select
const Input = ({ label, ...props }) => (
    <div>
        <label style={{ display: 'block', marginBottom: '5px' }}>{label}:</label>
        <input {...props} style={{ width: '100%', padding: '8px', boxSizing: 'border-box' }} />
    </div>
);
const Select = ({ label, children, ...props }) => (
    <div>
        <label style={{ display: 'block', marginBottom: '5px' }}>{label}:</label>
        <select {...props} style={{ width: '100%', padding: '10px', boxSizing: 'border-box' }}>
            {children}
        </select>
    </div>
);

const tableHeaderStyle = { border: '1px solid #ddd', padding: '12px', textAlign: 'left' };
const tableCellStyle = { border: '1px solid #ddd', padding: '10px' };


export default AssetManagementPage;